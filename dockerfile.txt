FROM golang:1.21-alpine AS go-builder

WORKDIR /app

# Install required build tools
RUN apk add --no-cache make git gcc musl-dev

# Copy go.mod and go.sum first for better caching
COPY go.mod go.sum* ./
RUN go mod download

# Copy the source code
COPY . .

# Build the Go binary
RUN make build-go

# If we have Rust components, build them
FROM rust:1.69-alpine AS rust-builder

WORKDIR /app

# Install necessary build tools
RUN apk add --no-cache build-base

# Copy rust source
COPY ./rust /app/rust
COPY Cargo.toml Cargo.lock* ./

# Build Rust components if they exist
RUN if [ -d "rust" ]; then \
        cargo build --release; \
    else \
        echo "No Rust code to build"; \
    fi

# Final stage
FROM alpine:3.18

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata libgcc

# Copy the binary from the Go builder
COPY --from=go-builder /app/bin/aigateway /app/aigateway

# Copy Rust libraries if they exist
COPY --from=rust-builder /app/target/release/*.so* /app/lib/ 2>/dev/null || true

# Copy config files
COPY config.json /app/config.json

# Set environment variables
ENV SERVICE_HOST=0.0.0.0
ENV SERVICE_PORT=8080
ENV LD_LIBRARY_PATH=/app/lib:$LD_LIBRARY_PATH

# Expose the port
EXPOSE 8080

# Create a non-root user to run the app
RUN adduser -D -h /app appuser
RUN chown -R appuser:appuser /app
USER appuser

# Set the entrypoint
ENTRYPOINT ["/app/aigateway"]
CMD ["--config", "/app/config.json"]
